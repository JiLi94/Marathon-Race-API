from flask import Blueprint, jsonify, request, abort
from main import db, bcrypt, jwt
from models.races import Race
from models.participants import Participant
from controllers.participants_controller import is_admin
from schemas.race_schema import race_schema, races_schema
from datetime import datetime, timedelta
from flask_jwt_extended import jwt_required, get_jwt_identity
from sqlalchemy import text
from validator import validate_input, is_admin

races = Blueprint('races', __name__, url_prefix='/races')

# a route to view all races
@races.route('/', methods=['GET'])
def get_races():
    # query all races from the database
    races_list = Race.query.all()
    # convert to json format & return the result
    return jsonify(races_schema.dump(races_list))

# a route to check one single race
@races.route('/<int:id>', methods=['GET'])
def get_race(id):
    # query race from the database
    race = Race.query.get(id)
    # convert to json format and return the result
    return jsonify(race_schema.dump(race))

# a route to add a race (admin only)
@races.route('/', methods=['POST'])
@is_admin
@validate_input(race_schema, ['name', 'distance', 'date', 'start_time', 'cut_off_time', 'field_limit', 'start_line', 'finish_line', 'fee'])
def add_race():
    # get data from the request
    race_fields = race_schema.load(request.json)

    # check if there is any existing race with same name and date. if race already exists, return error
    race = Race.query.filter_by(
        name=race_fields['name'], date=race_fields['date']).first()
    if race:
        return abort(400, description='Race already exists!')

    # not allow to add race id, id should be generated by the system
    if 'id' in race_fields:
        race_fields.pop('id')

    # if all good, create race object
    race = Race(**race_fields)
    # add race to the database
    db.session.add(race)
    db.session.commit()
    return jsonify(race_schema.dump(race))

# a route to update a race (admin only)
@races.route('/<int:race_id>', methods=['PUT'])
@validate_input(race_schema)
@is_admin
def update_race(race_id):
    # get user input
    input_fields = race_schema.load(request.json)
    race = Race.query.get(race_id)

    # update fields
    for key, value in input_fields.items():
        # not allowed to update primary key id
        if key == 'id':
            continue
        # update other attributes
        elif getattr(race, key) is not None and getattr(race, key) != value:
            setattr(race, key, value)

    # query the database to check existing race with same name, distance and date, but with different id
    sql = text(
        'SELECT * FROM races WHERE name = :name AND date = :date AND id <> :id LIMIT 1')
    existing_race = db.session.execute(
        sql, {'name': race.name, 'date': race.date, 'date': race.date, 'id': race.id})
    # if there is an existing race, return error
    if existing_race.mappings().all():
        return abort(400, description='Race already exists!')

    db.session.commit()
    # # convert to json format
    result = race_schema.dump(race)
    return jsonify(msg='Updated successfully', Updated=result)
